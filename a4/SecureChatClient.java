import java.util.*;
import java.io.*;
import java.net.*;
import javax.swing.*;
import java.awt.event.*;
import java.awt.*;
import java.math.*;

/** 
    Primitive chat client. 
    This client connects to a server so that messages can be typed and forwarded
    to all other clients.  Try it out in conjunction with SecureChatServer.java.

    @author Nicolas Leo
    CS 1501 Project 4
    Modified version of ImprovedChatClient.java by Sherif Khattab
    Adapted from Dr. John Ramirez's CS 1501 Assignment 4
*/
public class SecureChatClient extends JFrame implements Runnable, ActionListener 
{

    public static final int PORT = 8765;


    JTextArea outputArea;
    JLabel prompt;
    JTextField inputField;
    ObjectInputStream myReader;
    ObjectOutputStream myWriter;
    String myName, serverName;
    Socket socket;
    SymCipher cipher;

    public SecureChatClient ()
    {
        try {

            myName = JOptionPane.showInputDialog(this, "Enter your user name: ");
            serverName = JOptionPane.showInputDialog(this, "Enter the server name: ");
            InetAddress addr = InetAddress.getByName(serverName);
            socket = new Socket(addr, PORT);   // Connect to server with new socket

            // Make Reader and Writer
            myReader = new ObjectInputStream(socket.getInputStream());   
            myWriter = new ObjectOutputStream(socket.getOutputStream());
            myWriter.flush();

            // Receive E & N from the Server
            BigInteger E = (BigInteger) myReader.readObject(),
                       N = (BigInteger) myReader.readObject();

            // FOR GRADING ONLY: Output the keys E & N
            System.out.printf("E: %s\n\n", E.toString());
            System.out.printf("N: %s\n\n", N.toString());

            // Receive encryption type from the Server
            String encType = (String) myReader.readObject();

            // Set cypher type and create a random key;
            if (encType.equals("Add"))
            {
                cipher = new Add128(); 

                // FOR GRADING ONLY: Output type of symmetric encryption
                System.out.println("Encryption type: Add128");
            }  
            else
            {
                cipher = new Substitute();  

                // FOR GRADING ONLY: Output type of symmetric encryption
                System.out.println("Encryption type: Substitute"); 
            }                         

            // Generate private key
            BigInteger bigKey = new BigInteger (1, cipher.getKey());
            bigKey = bigKey.modPow(E, N);

            // FOR GRADING ONLY: Output the symmetric key generated by the client
            System.out.printf("\nSymmetric key: %s\n", bigKey.toString());

            // Send key to the Server
            myWriter.writeObject(bigKey); myWriter.flush();


            // Send name to Server. Server will need this to announce sign-on and sign-off
            // of clients
            myWriter.writeObject(cipher.encode(myName)); myWriter.flush();

            this.setTitle(myName);      // Set title to identify chatter
    
            Box b = Box.createHorizontalBox();  // Set up graphical environment for
            outputArea = new JTextArea(8, 30);  // user
            outputArea.setEditable(false);
            b.add(new JScrollPane(outputArea));
    
            outputArea.append("Welcome to the Chat Group, " + myName + "\n");
    
            inputField = new JTextField("");  // This is where user will type input
            inputField.addActionListener(this);
    
            prompt = new JLabel("Type your messages below:");
            Container c = getContentPane();
    
            c.add(b, BorderLayout.NORTH);
            c.add(prompt, BorderLayout.CENTER);
            c.add(inputField, BorderLayout.SOUTH);
    
            Thread outputThread = new Thread(this);  // Thread is to receive strings
            outputThread.start();                    // from Server
    
            addWindowListener(
                new WindowAdapter()
                {
                    public void windowClosing(WindowEvent e)
                    { 
                        try
                        {
                            String currMsg = "CLIENT CLOSING";

                            // FOR GRADING ONLY
                            System.out.println("\nCLOSING CLIENT");
                            System.out.printf("Array of bytes: %s\n", 
                                Arrays.toString(currMsg.getBytes()));
                            byte [] bytes = cipher.encode(currMsg);
                            System.out.printf("Encrypted array of bytes: %s\n", 
                                Arrays.toString(bytes));
                            
                            // Send encrypted message to the Server
                            myWriter.writeObject(bytes); myWriter.flush();  
                        }
                        catch (Exception ex)
                        {
                            System.out.printf("Issue closing the client: %s\n", 
                                ex.toString());
                        }
                        
                        System.exit(0);
                    }
                }
            );
    
            setSize(500, 200);
            setVisible(true);

        }
        catch (Exception e)
        {
            System.out.println("Problem starting client!");
        }
    }

    public void run()
    {
        byte [] bytes;
        String currMsg;
        while (true)
        {
             try 
             {
                bytes = (byte[]) myReader.readObject();
             }
             catch (Exception e)
             {
                System.out.println(e +  ", closing client!");
                break;
             }

                //For GRADING ONLY
                System.out.printf("\nRECEIVED MESSAGE\nEncrypted array of bytes: %s\n", 
                                    Arrays.toString(bytes));
                currMsg = cipher.decode(bytes);
                System.out.printf("Decrypted array of bytes: %s\n", 
                                    Arrays.toString(currMsg.getBytes()));
                System.out.printf("Decrypted message: %s\n", currMsg);


                outputArea.append(currMsg+"\n");

        }
        System.exit(0);
    }

    public void actionPerformed(ActionEvent e)
    {
        StringBuilder msg = new StringBuilder();
        msg.append(myName);                    // Add name to beginning of message
        msg.append(": ");
        msg.append(e.getActionCommand());      // Get input value
        String currMsg = msg.toString();

        // FOR GRADING ONLY
        System.out.printf("\nSENDING MESSAGE\nOriginal Message: %s\n", currMsg);
        System.out.printf("Array of bytes: \t%s\n", Arrays.toString(currMsg.getBytes()));
        byte [] bytes = cipher.encode(currMsg);
        System.out.printf("Encrypted array of bytes: %s\n", Arrays.toString(bytes));
        
        inputField.setText("");

        try     // Send encrypted message to the Server
        {
            myWriter.writeObject(bytes); myWriter.flush();    
        }
        catch (Exception ex)
        {
            System.out.printf("Issue sending message to the server: %s\n", ex.toString());
        }
        
    }                                               

    public static void main(String [] args)
    {
         SecureChatClient JR = new SecureChatClient();
         JR.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
    }
}